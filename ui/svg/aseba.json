{
	"blocks": [
		{
			"name": "!stop",
			"aseba": {
				"statement": [
					"motor.left.target = 0\n",
					"motor.right.target = 0\n",
					"call sound.system(-1)\n",
					"call leds.circle(32,32,32,32,32,32,32,32)\n",
					"timer.period[0] = 100\n",
					"onevent timer0\n",
					"call leds.circle(0,0,0,0,0,0,0,0)\n"
				]
			}
		},
		{
			"name": "!stop and blink",
			"aseba": {
				"statement": [
					"var i = 16\n",
					"var s = 17\n",
					"motor.left.target = 0\n",
					"motor.right.target = 0\n",
					"call sound.system(-1)\n",
					"timer.period[0] = 125\n",
					"onevent timer0\n",
					"call leds.circle((s&1)<<5,(s&2)<<4,(s&4)<<3,(s&8)<<2,(s&16)<<1,s&32,(s&64)>>1,(s&128)>>2)\n",
					"s = (s << 1) & 0xff | (s >> 7) & 1\n",
					"i -= 1\n",
					"if i < 0 then\n",
					"timer.period[0] = 0\n",
					"end\n"
				]
			}
		},
		{
			"name": "!init",
			"aseba": {
				"initCodeExec": [
					"call sound.system(-1)\n"
				]
			}
		},
		{
			"name": "!volume",
			"aseba": {
				"statement": [
					"# set volume\n",
					"call _system.settings.write(0, `$[0] > 8 ? 0 : 8 - $[0]`)\n"
				]
			}
		},
		{
			"name": "!trace",
			"aseba": {
				"statement": [
					"emit trace `$[0]`\n"
				]
			}
		},
		{
			"name": "button 1",
			"aseba": {
				"sectionBegin": "onevent buttons\n",
				"clause": "button.`['center', 'forward', 'backward', 'right', 'left'][$[0]]` != 0"
			}
		},
		{
			"name": "init",
			"aseba": {
				"sectionBegin": "# initialization\n"
			}
		},
		{
			"name": "state 256",
			"aseba": {
				"initVarDecl": [
					"var state\n"
				],
				"initCodeExec": [
					"state = 0\n"
				],
				"clause":
					"state == `$.reduce(function (a, b, i) { return b ? a | (1 << i) : a; }, 0)`"
			}
		},
		{
			"name": "state 256 with mask",
			"aseba": {
				"initVarDecl": [
					"var state\n"
				],
				"initCodeExec": [
					"state = 0\n"
				],
				"clause":
					"(state & `$.reduce(function (a, b, i) { return b !== 0 ? a | (1 << i) : a; }, 0)`) == `$.reduce(function (a, b, i) { return b === 1 ? a | (1 << i) : a; }, 0)`"
			}
		},
		{
			"name": "roll",
			"aseba": {
				"initVarDecl": [
					[
						"# roll angle from accelerometer\n",
						"var rollAngle\n"
					]
				],
				"sectionBegin": "onevent acc\n",
				"clauseInit":
					"call math.atan2(rollAngle, -acc[0], acc[2])\n",
				"clause": "`Math.abs($[0]) === 12 ? 'rollAngle >= 31403 or rollAngle < -31403' : 'rollAngle >= ' + Math.round(2730.67 * $[0] - 1365.33) + ' and rollAngle < ' + Math.round(2730.67 * $[0] + 1365.33)`"
			}
		},
		{
			"name": "acc side",
			"aseba": {
				"initVarDecl": [
					[
						"# roll angle from accelerometer\n",
						"var rollAngle\n"
					]
				],
				"sectionBegin": "onevent acc\n",
				"clauseInit":
					"call math.atan2(rollAngle, acc[0], acc[2])\n",
				"clause": "abs(abs(rollAngle) - 16384) < 1365"
			}
		},
		{
			"name": "acc upside down",
			"aseba": {
				"sectionBegin": "onevent acc\n",
				"clause": "-acc[2] / 2 > abs(acc[0]) + abs(acc[1])"
			}
		},
		{
			"name": "yaw",
			"aseba": {
				"initVarDecl": [
					"# yaw angle from accelerometer\nvar yawAngle\n"
				],
				"sectionBegin": "onevent acc\n",
				"clauseInit":
					"call math.atan2(yawAngle, -acc[0], acc[1])\n",
				"clause": "`Math.abs($[0]) === 12 ? 'yawAngle >= 31403 or yawAngle < -31403' : 'yawAngle >= ' + Math.round(2730.67 * $[0] - 1365.33) + ' and yawAngle < ' + Math.round(2730.67 * $[0] + 1365.33)`"
			}
		},
		{
			"name": "pitch",
			"aseba": {
				"initVarDecl": [
					[
						"# pitch angle from accelerometer\n",
						"var pitchAngle\n"
					]
				],
				"sectionBegin": "onevent acc\n",
				"clauseInit":
					"call math.atan2(pitchAngle, -acc[1], acc[2])\n",
				"clause": "`Math.abs($[0]) === 12 ? 'pitchAngle >= 31403 or pitchAngle < -31403' : 'pitchAngle >= ' + Math.round(2730.67 * $[0] - 1365.33) + ' and pitchAngle < ' + Math.round(2730.67 * $[0] + 1365.33)`"
			}
		},
		{
			"name": "clap",
			"aseba": {
				"initCodeExec": [
					[
						"# setup threshold for detecting claps\n",
						"mic.threshold = 250\n"
					]
				],
				"sectionBegin": "onevent buttons\n",
				"clause": "mic.intensity > mic.threshold"
			}
		},
		{
			"name": "fall",
			"aseba": {
				"sectionBegin": "onevent acc\n",
				"clause": "abs(acc[0]) + abs(acc[1]) + abs(acc[2]) < 16"
			}
		},
		{
			"name": "tap",
			"aseba": {
				"initVarDecl": [
					"var tapped\n"
				],
				"initCodeExec": [
					"tapped = 0\n"
				],
				"sectionBegin": "onevent tap\n",
				"sectionPreamble": "tapped = 1\n",
				"clauseAsCondition": "tapped != 0"
			}
		},
		{
			"name": "color 8 state",
			"aseba": {
				"initVarDecl": [
					[
						"var topColor[3]\n"
					]
				],
				"initCodeExec": [
					"topColor = [0, 0, 0]\n"
				],
				"clause": "topColor[0] `$[0] % 2 ? '>=' : '<'` 16 and topColor[1] `$[0] % 4 >= 2 ? '>=' : '<'` 16 and topColor[2] `$[0] >= 4 ? '>=' : '<'` 16"
			}
		},
		{
			"name": "bottom color 8 state",
			"aseba": {
				"initVarDecl": [
					[
						"var bottomColor[3]\n"
					]
				],
				"initCodeExec": [
					"bottomColor = [0, 0, 0]\n"
				],
				"clause": "bottomColor[0] `$[0] % 2 ? '>=' : '<'` 16 and bottomColor[1] `$[0] % 4 >= 2 ? '>=' : '<'` 16 and bottomColor[2] `$[0] >= 4 ? '>=' : '<'` 16"
			}
		},
		{
			"name": "horiz prox",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { return $[i] ? 'prox.horizontal[' + ix + '] ' + ($[i] > 0 ? '>= 2000' : '<= 1000') : ''; }).filter(function (s) { return s; }).join(' and ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'prox.horizontal[' + ix + '] >= 2000'; }).join(' or ')`"
			}
		},
		{
			"name": "horiz prox front adv",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"clauseAnd": "`i < 5 && $[i] ? 'prox.horizontal[' + i + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * $[5]) + '00' : ''`"
			}
		},
		{
			"name": "horiz prox back adv",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"clauseAnd": "`i < 2 && $[i] ? 'prox.horizontal[' + (i + 5) + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * $[2]) + '00' : ''`"
			}
		},
		{
			"name": "ground mean",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"clause": "prox.ground.delta[0] + prox.ground.delta[1] `$[0] ? '>= 900' : '<= 800'`"
			}
		},
		{
			"name": "ground",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"clauseAnd": "`$[i] ? 'prox.ground.delta[' + i + '] ' + ($[i] > 0 ? '>= 450' : '<= 400') : ''`"
			}
		},
		{
			"name": "ground 1",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"clauseAnd": "`i < 2 && $[i] ? 'prox.ground.delta[' + i + '] ' + ($[i] > 0 ? '>= ' : '<= ') + 25 * Math.round(40 * $[2]) : ''`"
			}
		},
		{
			"name": "remote control arrows",
			"aseba": {
				"sectionBegin": "onevent rc5\n",
				"clause": "`[[85, 17], [80, 32], [81, 33], [86, 16, 78], [87, 13]][$[0]].map(function (c) { return 'rc5.command == ' + c; }).join(' or ')`",
				"clauseAlwaysEval": true
			}
		},
		{
			"name": "remote control keypad",
			"aseba": {
				"sectionBegin": "onevent rc5\n",
				"clause": "rc5.command == `$[0]`",
				"clauseAlwaysEval": true
			}
		},
		{
			"name": "timer",
			"aseba": {
				"initVarDecl": [
					"var timerElapsed\n"
				],
				"initCodeExec": [
					[
						"# stop timer 0\n",
						"timer.period[0] = 0\n"
					],
					"timerElapsed = 0\n"
				],
				"sectionBegin": "onevent timer0\n",
				"sectionPreamble": [
					"timerElapsed = 1\n",
					"timer.period[0] = 0\n"
				],
				"clauseAsCondition": "timerElapsed != 0"
			}
		},
		{
			"name": "clock",
			"aseba": {
				"sectionBegin": "onevent `$[0] === 10 ? 'prox' : 'buttons'`\n"
			}
		},
		{
			"name": "counter comparison",
			"aseba": {
				"initVarDecl": [
					"var state\n"
				],
				"initCodeExec": [
					"state = 0\n"
				],
				"clause":
					"state `['<=','<','==','>','>='][$[0] + 2]` `$[1]`"
			}
		},
		{
			"name": "motor",
			"aseba": {
				"initCodeExec": [
					[
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement":
					[
						"motor.left.target = `Math.round(500 * $[0] * slowdown)`\n",
						"motor.right.target = `Math.round(500 * $[1] * slowdown)`\n"
					]
			}
		},
		{
			"name": "move",
			"aseba": {
				"initCodeExec": [
					[
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement":
					[
						"motor.left.target = `Math.round([0,200,200,100,-200,-200,-50,-100,50][$[0]] * slowdown)`\n",
						"motor.right.target = `Math.round([0,200,50,-100,-50,-200,-200,100,200][$[0]] * slowdown)`\n"
					]
			}
		},
		{
			"name": "top color 8",
			"aseba": {
				"initVarDecl": [
					[
						"var topColor[3]\n"
					]
				],
				"initCodeExec": [
					"topColor = [0, 0, 0]\n",
					[
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement":
					[
						"call leds.top(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`)\n",
						"topColor = [`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`]\n"
					]
			}
		},
		{
			"name": "bottom color 8",
			"aseba": {
				"initVarDecl": [
					[
						"var bottomColor[3]\n"
					]
				],
				"initCodeExec": [
					"bottomColor = [0, 0, 0]\n",
					[
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement": [
					"call leds.bottom.left(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`)\n",
					"call leds.bottom.right(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`)\n",
					"bottomColor = [`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`]\n"
				]
			}
		},
		{
			"name": "top color",
			"aseba": {
				"initVarDecl": [
					"var topColor[3]\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0]\n",
					[
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement": [
					"call leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n",
					"topColor = [`$.map(function (x) { return Math.round(32 * x); }).join(', ')`]\n"
				],
				"statementWithoutInit":
					"call leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n"
			}
		},
		{
			"name": "bottom color",
			"aseba": {
				"initVarDecl": [
					[
						[
							"var bottomColor[3]\n"
						]
					]
				],
				"initCodeExec": [
					"bottomColor = [0, 0, 0]\n",
					[
						"call leds.top(0, 0, 0)\n",
						"call leds.bottom.left(0, 0, 0)\n",
						"call leds.bottom.right(0, 0, 0)\n",
						"call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
					]
				],
				"statement": [
					"call leds.bottom.left(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n",
					"call leds.bottom.right(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n",
					"bottomColor = [`$.map(function (x) { return Math.round(32 * x); }).join(', ')`]\n"
				],
				"statementWithoutInit": [
					"call leds.bottom.left(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n",
					"call leds.bottom.right(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`)\n"
				]
			}
		},
		{
			"name": "set state 256",
			"aseba": {
				"initVarDecl": [
					"var state\n"
				],
				"initCodeExec": [
					"state = 0\n"
				],
				"initCodeDecl": [
					[
						"sub display_state\n",
						"call leds.circle((state&1)*32,(state&2)*16,(state&4)*8,(state&8)*4,(state&16)*2,state&32,(state&64)/2,(state&128)/4)\n"
					]
				],
				"statement": [
					"state = `$.reduce(function (a, b, i) { return b ? a | (1 << i) : a; }, 0)`\n",
					"callsub display_state\n"
				]
			}
		},
		{
			"name": "set state 256 with mask",
			"aseba": {
				"initVarDecl": [
					"var state\n"
				],
				"initCodeExec": [
					"state = 0\n"
				],
				"initCodeDecl": [
					[
						"sub display_state\n",
						"call leds.circle((state&1)*32,(state&2)*16,(state&4)*8,(state&8)*4,(state&16)*2,state&32,(state&64)/2,(state&128)/4)\n"
					]
				],
				"statement":
					"state = state & `$.reduce(function (a, b, i) { return b === 0 ? a | (1 << i) : a; }, 0)` | `$.reduce(function (a, b, i) { return b === 1 ? a | (1 << i) : a; }, 0)`\ncallsub display_state\n"
			}
		},
		{
			"name": "set timer",
			"aseba": {
				"initVarDecl": [
					"var timerElapsed\n"
				],
				"initCodeExec": [
					[
						"# stop timer 0\n",
						"timer.period[0] = 0\n"
					],
					"timerElapsed = 0\n"
				],
				"statement": [
					"timer.period[0] = `Math.round(1000 * $[0] / slowdown)`\n",
					"timerElapsed = 0\n"
				]
			}
		},
		{
			"name": "notes",
			"aseba": {
				"initVarDecl": [
					[
						"# variables for notes\n",
						"var notes[6]\n",
						"var durations[6]\n",
						"var note_index\n",
						"var note_count\n",
						"var wave[142]\n",
						"var i\n",
						"var wave_phase\n",
						"var wave_intensity\n"
					]
				],
				"initCodeExec": [
					[
						"# init. variables for notes\n",
						"note_index = 6\n",
						"note_count = 6\n"
					],
					[
						"# compute a sinus wave for sound\n",
						"for i in 0 : 141 do\n",
						"wave_phase = (i - 70) * 468\n",
						"call math.cos(wave_intensity, wave_phase)\n",
						"wave[i] = wave_intensity / 256\n",
						"end\n",
						"call sound.wave(wave)\n"
					],
					[
						"call sound.system(-1)\n"
					]
				],
				"initCodeDecl": [
					[
						"# when a note is finished, play the next one\n",
						"onevent sound.finished\n",
						"if note_index != note_count then\n",
						"call sound.freq(notes[note_index], durations[note_index])\n",
						"note_index++\n",
						"end\n"
					]
				],
				"statement": [
					"notes = [`$.filter(function (a, i) { return i % 2 == 0; }).map(function (h, i) { return $[2 * i + 1] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`]\n",
					"durations = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return d ? 7 * d : 28; }).join(', ')`]\n",
					"note_index = 1\n",
					"note_count = 6\n",
					"call sound.freq(notes[0], durations[0])\n"
				]
			}
		},
		{
			"name": "notes with speed",
			"aseba": {
				"initVarDecl": [
					[
						"# variables for notes\n",
						"var notes[6]\n",
						"var durations[6]\n",
						"var note_index\n",
						"var note_count\n",
						"var wave[142]\n",
						"var i\n",
						"var wave_phase\n",
						"var wave_intensity\n"
					]
				],
				"initCodeExec": [
					[
						"# init. variables for notes\n",
						"note_index = 6\n",
						"note_count = 6\n"
					],
					[
						"# compute a sinus wave for sound\n",
						"for i in 0 : 141 do\n",
						"wave_phase = (i - 70) * 468\n",
						"call math.cos(wave_intensity, wave_phase)\n",
						"wave[i] = wave_intensity / 256\n",
						"end\n",
						"call sound.wave(wave)\n"
					],
					[
						"call sound.system(-1)\n"
					]
				],
				"initCodeDecl": [
					[
						"# when a note is finished, play the next one\n",
						"onevent sound.finished\n",
						"if note_index != note_count then\n",
						"call sound.freq(notes[note_index], durations[note_index])\n",
						"note_index++\n",
						"end\n"
					]
				],
				"statement": [
					"notes = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (h, i) { return $[2 * i + 2] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`]\n",
					"durations = [`$.slice(1).filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return Math.round(Math.pow(2, $[0]) * 7) * (d ? d : 4); }).join(', ')`]\n",
					"note_index = 1\n",
					"note_count = 6\n",
					"call sound.freq(notes[0], durations[0])\n"
				]
			}
		},
		{
			"name": "play",
			"aseba": {
				"initCodeExec": [
					"call sound.system(-1)\n"
				],
				"statement": "call sound.play(`$[0].toString(10)`)\n"
			}
		},
		{
			"name": "play stop",
			"aseba": {
				"initCodeExec": [
					"call sound.system(-1)\n"
				],
				"statement": "call sound.play(-1)\n"
			}
		},
		{
			"name": "arithmetic",
			"aseba": {
				"initVarDecl": [
					"var state\n"
				],
				"initCodeExec": [
					"state = 0\n"
				],
				"initCodeDecl": [
					[
						"sub display_state\n",
						"call leds.circle((state&1)*32,(state&2)*16,(state&4)*8,(state&8)*4,(state&16)*2,state&32,(state&64)/2,(state&128)/4)\n"
					]
				],
				"statement": [
					"`$[2] && $[0] != 0 && $[0] != 4 && $[1] != 0 ? 'if state ' + ($[0] == 2 ? '< ' + $[1] + ' then\\nstate = 0\\n' : '> ' + [null,255-$[1],null,Math.floor(255/$[1])][$[0]] + ' then\\nstate = 255\\n') + 'else\\nstate ' + ['','+','-','*','/'][$[0]] + '= ' + $[1] + '\\nend' : 'state ' + ['','+','-','*','/'][$[0]] + '= ' + $[1]`\n",
					"callsub display_state\n"
				]
			}
		},
		{
			"name": "button",
			"aseba": {
				"sectionBegin": "onevent buttons\n",
				"clause": "`['center', 'forward', 'backward', 'right', 'left'].map(function (s, i) { return $[i] ? 'button.' + s + ' != 0' : ''; }).filter(function (s) { return s; }).join(' and ') || ['center', 'forward', 'backward', 'right', 'left'].map(function (s) { return 'button.' + s + ' != 0'; }).join(' or ')`"
			}
		},
		{
			"name": "horiz prox adv",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { var p = 'prox.horizontal[' + ix + '] ', l = Math.round(17 + 33 * $[7]) + '00', g = Math.round(17 + 33 * $[8]) + '00'; return $[i] === 1 ? p + '>= ' + g : $[i] === 2 ? p + '< ' + l : $[i] === 3 ? p + '>= ' + l + ' and ' + p + '< ' + g : ''; }).filter(function (s) { return s; }).join(' and ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'prox.horizontal[' + ix + '] >= 2000'; }).join(' or ')`"
			}
		},
		{
			"name": "ground adv",
			"aseba": {
				"sectionBegin": "onevent prox\n",
				"clause": "`[0, 1].map(function (ix, i) { var p = 'prox.ground.delta[' + ix + '] ', l = Math.round(25 + 40 * $[2]) + '0', g = Math.round(25 + 40 * $[3]) + '0'; return $[i] === 1 ? p + '>= ' + g : $[i] === 2 ? p + '< ' + l : $[i] === 3 ? p + '>= ' + l + ' and ' + p + '< ' + g : ''; }).filter(function (s) { return s; }).join(' and ') || [0, 1].map(function (ix) { return 'prox.ground.delta[' + ix + '] >= 450'; }).join(' or ')`"
			}
		}
	]
}
